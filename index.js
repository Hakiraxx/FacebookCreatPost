const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

const delay = (ms) => new Promise((res) => setTimeout(res, ms));
const groupLinks = fs.readFileSync('groups.txt', 'utf8').split('\n').filter(Boolean);
const imageFolder = path.resolve(__dirname, 'images');

// Load cookie t·ª´ file
const cookieString = fs.readFileSync('cookies.txt', 'utf8');
const cookies = cookieString.split(';').map((cookie) => {
  const [name, ...rest] = cookie.trim().split('=');
  return {
    name,
    value: rest.join('='),
    domain: '.facebook.com',
  };
});

const postToGroup = async (page, groupURL, content, imagePaths = []) => {
  try {
    console.log(`üîó ƒêang v√†o nh√≥m: ${groupURL}`);
    await page.goto(groupURL, { waitUntil: 'networkidle2' });

    // M·ªü khung vi·∫øt b√†i
    await page.waitForSelector('span[class="x1lliihq x6ikm8r x10wlt62 x1n2onr6"]', { timeout: 15000 });
    await page.click('span[class="x1lliihq x6ikm8r x10wlt62 x1n2onr6"]');

    // Nh·∫≠p n·ªôi dung
    await page.waitForSelector('div[role="dialog"] div[role="textbox"]', { timeout: 15000 });
    const textbox = await page.$('div[role="dialog"] div[role="textbox"]');
    await textbox.type(content);

    // N·∫øu c√≥ ·∫£nh th√¨ t·∫£i l√™n
    if (imagePaths.length > 0) {
      const photoButtonSelector = 'div[aria-label="Photo/video"]';
      await page.waitForSelector(photoButtonSelector, { timeout: 10000 });
      await page.click(photoButtonSelector);

      const inputFileSelector = 'input[type="file"][multiple]';
      await page.waitForSelector(inputFileSelector, { timeout: 10000 });
      const input = await page.$(inputFileSelector);

      await input.uploadFile(...imagePaths);
      console.log(`üì∏ ƒê√£ t·∫£i ${imagePaths.length} ·∫£nh`);
      await delay(8000); // Ch·ªù ·∫£nh hi·ªÉn th·ªã
    }

    // ƒêƒÉng b√†i
    await page.waitForSelector('div[aria-label="Post"]', { timeout: 10000 });
    await page.click('div[aria-label="Post"]');
    console.log(`‚úÖ ƒê√£ ƒëƒÉng b√†i v√†o nh√≥m: ${groupURL}`);
  } catch (err) {
    console.error(`‚ùå L·ªói v·ªõi nh√≥m ${groupURL}: ${err.message}`);
  }
};

(async () => {
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
  });

  const page = await browser.newPage();
  await page.setCookie(...cookies);

  const content = `Hello everyone üëã\nThis is an automated post using Puppeteer.\nüî• #Automation #FacebookBot`;

  const imageFiles = fs.readdirSync(imageFolder)
    .filter(file => /\.(jpe?g|png)$/i.test(file))
    .map(file => path.join(imageFolder, file));

  const loopPost = async () => {
    for (const groupURL of groupLinks) {
      const selectedImages = imageFiles.slice(0, 3); // Ch·ªçn t·ªëi ƒëa 3 ·∫£nh
      await postToGroup(page, groupURL, content, selectedImages);
      console.log('‚è≥ Ch·ªù 5 ph√∫t tr∆∞·ªõc nh√≥m ti·∫øp theo...\n');
      await delay(5 * 60 * 1000); // 5 ph√∫t
    }
  };

  while (true) {
    await loopPost();
    console.log('‚è≤Ô∏è Ho√†n t·∫•t m·ªôt v√≤ng ƒëƒÉng b√†i. Ch·ªù 2 ti·∫øng tr∆∞·ªõc khi l·∫∑p l·∫°i...\n');
    await delay(2 * 60 * 60 * 1000); // 2 ti·∫øng
  }

  // await browser.close(); // Kh√¥ng ƒë√≥ng n·∫øu ch·∫°y li√™n t·ª•c
})();
